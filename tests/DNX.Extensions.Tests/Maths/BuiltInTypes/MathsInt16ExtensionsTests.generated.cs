using DNX.Extensions.Maths;
using DNX.Extensions.Maths.BuiltInTypes;
using DNX.Extensions.Tests.Maths.BuiltInTypes.TestsDataSource;
using Shouldly;
using Xunit;

//==============================================================================
// This source file was generated by a script - do not edit manually
//==============================================================================

namespace DNX.Extensions.Tests.Maths.BuiltInTypes;

public class MathsInt16ExtensionsTests
{
    [Theory]
    [MemberData(nameof(MathsInt16ExtensionsTestsDataSource.IsBetween_Default), MemberType = typeof(MathsInt16ExtensionsTestsDataSource))]
    public void IsBetween_Default(short value, short min, short max, bool expectedResult)
    {
        value.IsBetween(min, max).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsInt16ExtensionsTestsDataSource.IsBetween_BoundsType), MemberType = typeof(MathsInt16ExtensionsTestsDataSource))]
    public void IsBetween_BoundsType(short value, short min, short max, IsBetweenBoundsType boundsType, bool expectedResult)
    {
        value.IsBetween(min, max, boundsType).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsInt16ExtensionsTestsDataSource.IsBetweenEither_Default), MemberType = typeof(MathsInt16ExtensionsTestsDataSource))]
    public void IsBetweenEither_Default(short value, short min, short max, bool expectedResult)
    {
        value.IsBetweenEither(min, max).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsInt16ExtensionsTestsDataSource.IsBetweenEither_BoundsType), MemberType = typeof(MathsInt16ExtensionsTestsDataSource))]
    public void IsBetweenEither_BoundsType(short value, short min, short max, IsBetweenBoundsType boundsType, bool expectedResult)
    {
        value.IsBetweenEither(min, max, boundsType).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsInt16ExtensionsTestsDataSource.IsBetween), MemberType = typeof(MathsInt16ExtensionsTestsDataSource))]
    public void IsBetween(short value, short min, short max, bool allowEitherOrder, IsBetweenBoundsType boundsType, bool expectedResult)
    {
        value.IsBetween(min, max, allowEitherOrder, boundsType).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsInt16ExtensionsTestsDataSource.GetLowerBound_Default), MemberType = typeof(MathsInt16ExtensionsTestsDataSource))]
    public void GetLowerBound_Default(short min, short max, short expectedResult)
    {
        MathsInt16Extensions.GetLowerBound(min, max).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsInt16ExtensionsTestsDataSource.GetLowerBound_AllowEitherOrder), MemberType = typeof(MathsInt16ExtensionsTestsDataSource))]
    public void GetLowerBound_AllowEitherOrder(short min, short max, bool allowEitherOrder, short expectedResult)
    {
        MathsInt16Extensions.GetLowerBound(min, max, allowEitherOrder).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsInt16ExtensionsTestsDataSource.GetUpperBound_Default), MemberType = typeof(MathsInt16ExtensionsTestsDataSource))]
    public void GetUpperBound_Default(short min, short max, short expectedResult)
    {
        MathsInt16Extensions.GetUpperBound(min, max).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsInt16ExtensionsTestsDataSource.GetUpperBound_AllowEitherOrder), MemberType = typeof(MathsInt16ExtensionsTestsDataSource))]
    public void GetUpperBound_AllowEitherOrder(short min, short max, bool allowEitherOrder, short expectedResult)
    {
        MathsInt16Extensions.GetUpperBound(min, max, allowEitherOrder).ShouldBe(expectedResult);
    }
}

