using DNX.Extensions.Maths;
using DNX.Extensions.Maths.BuiltInTypes;
using DNX.Extensions.Tests.Maths.BuiltInTypes.TestsDataSource;
using Shouldly;
using Xunit;

//==============================================================================
// This source file was generated by a script - do not edit manually
//==============================================================================

namespace DNX.Extensions.Tests.Maths.BuiltInTypes;

public class MathsDateTimeExtensionsTests
{
    [Theory]
    [MemberData(nameof(MathsDateTimeExtensionsTestsDataSource.IsBetween_Default), MemberType = typeof(MathsDateTimeExtensionsTestsDataSource))]
    public void IsBetween_Default(DateTime value, DateTime min, DateTime max, bool expectedResult)
    {
        value.IsBetween(min, max).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsDateTimeExtensionsTestsDataSource.IsBetween_BoundsType), MemberType = typeof(MathsDateTimeExtensionsTestsDataSource))]
    public void IsBetween_BoundsType(DateTime value, DateTime min, DateTime max, IsBetweenBoundsType boundsType, bool expectedResult)
    {
        value.IsBetween(min, max, boundsType).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsDateTimeExtensionsTestsDataSource.IsBetweenEither_Default), MemberType = typeof(MathsDateTimeExtensionsTestsDataSource))]
    public void IsBetweenEither_Default(DateTime value, DateTime min, DateTime max, bool expectedResult)
    {
        value.IsBetweenEither(min, max).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsDateTimeExtensionsTestsDataSource.IsBetweenEither_BoundsType), MemberType = typeof(MathsDateTimeExtensionsTestsDataSource))]
    public void IsBetweenEither_BoundsType(DateTime value, DateTime min, DateTime max, IsBetweenBoundsType boundsType, bool expectedResult)
    {
        value.IsBetweenEither(min, max, boundsType).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsDateTimeExtensionsTestsDataSource.IsBetween), MemberType = typeof(MathsDateTimeExtensionsTestsDataSource))]
    public void IsBetween(DateTime value, DateTime min, DateTime max, bool allowEitherOrder, IsBetweenBoundsType boundsType, bool expectedResult)
    {
        value.IsBetween(min, max, allowEitherOrder, boundsType).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsDateTimeExtensionsTestsDataSource.GetLowerBound_Default), MemberType = typeof(MathsDateTimeExtensionsTestsDataSource))]
    public void GetLowerBound_Default(DateTime min, DateTime max, DateTime expectedResult)
    {
        MathsDateTimeExtensions.GetLowerBound(min, max).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsDateTimeExtensionsTestsDataSource.GetLowerBound_AllowEitherOrder), MemberType = typeof(MathsDateTimeExtensionsTestsDataSource))]
    public void GetLowerBound_AllowEitherOrder(DateTime min, DateTime max, bool allowEitherOrder, DateTime expectedResult)
    {
        MathsDateTimeExtensions.GetLowerBound(min, max, allowEitherOrder).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsDateTimeExtensionsTestsDataSource.GetUpperBound_Default), MemberType = typeof(MathsDateTimeExtensionsTestsDataSource))]
    public void GetUpperBound_Default(DateTime min, DateTime max, DateTime expectedResult)
    {
        MathsDateTimeExtensions.GetUpperBound(min, max).ShouldBe(expectedResult);
    }

    [Theory]
    [MemberData(nameof(MathsDateTimeExtensionsTestsDataSource.GetUpperBound_AllowEitherOrder), MemberType = typeof(MathsDateTimeExtensionsTestsDataSource))]
    public void GetUpperBound_AllowEitherOrder(DateTime min, DateTime max, bool allowEitherOrder, DateTime expectedResult)
    {
        MathsDateTimeExtensions.GetUpperBound(min, max, allowEitherOrder).ShouldBe(expectedResult);
    }
}

