name: CI Build
run-name: CIBuild_${{ github.event_name }}_${{ github.ref_name }}_${{ github.run_number }}.${{ github.run_attempt }}

env:
  PKG_MAJOR_VERSION: '1.1'
  PROJECT_NAME: 'DNX.Extensions'
  DOTNET_VERSION: 6.0.x
  NUGET_VERSION: 5.x
  BUILD_CONFIG: Release
  BUILD_PLATFORM: Any CPU
  PACK_PARAMETERS: ''
  NUGET_OUTPUT_FOLDER: nupkgs

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'task/**'
      - 'spike/**'

  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  build:
    name: Build .NET

    runs-on: ubuntu-latest

    steps:
    - name: Get Current Date
      id: current_date
      run: echo "current_date=$(date +'%Y%m%d')" >> $GITHUB_ENV

    - name: Set Product Version
      id: product_version
      run: echo "product_version=${{ env.PKG_MAJOR_VERSION }}" >> $GITHUB_ENV

    - name: Set Assembly Version
      id: assembly_version
      run: echo "assembly_version=${{ env.PKG_MAJOR_VERSION }}.${{ env.current_date }}.${{ github.run_number }}${{ github.run_attempt }}" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v3

    - name: Install .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore NuGet packages
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration ${{ env.BUILD_CONFIG }} /p:"Platform=${{ env.BUILD_PLATFORM }}" /p:"Version=${{ env.product_version }}" /p:"AssemblyVersion=${{ env.assembly_version }}" --no-restore

    - name: Test
      run: dotnet test --configuration ${{ env.BUILD_CONFIG }} --no-restore --no-build --verbosity normal --collect:"XPlat Code Coverage"

    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: "**/coverage.cobertura.xml"
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: '60 80'

    - name: Pull Request - Add Coverage Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

    - name: Pack
      run: dotnet pack --configuration ${{ env.BUILD_CONFIG }} /p:"Platform=${{ env.BUILD_PLATFORM }}" /p:"Version=${{ env.assembly_version }}" --no-restore --output "${{ env.NUGET_OUTPUT_FOLDER }}"

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: build_output
        path: "**/${{ env.PROJECT_NAME }}/bin/${{ env.BUILD_CONFIG }}/**"
        if-no-files-found: error

    - name: Upload NuGet Artifact
      uses: actions/upload-artifact@v3
      with:
        name: nuget_output
        path: "${{ env.NUGET_OUTPUT_FOLDER }}/**"
        if-no-files-found: error

    outputs:
      assembly_version: ${{ env.assembly_version }}
      product_version: ${{ env.product_version }}

  release:
    name: Create GitHub Release
    if: github.ref == 'refs/heads/main' && success()

    needs: build

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Tag git
      uses: pkgdeps/git-tag-action@v2.0.5
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        github_repo: ${{ github.repository }}
        git_commit_sha: ${{ github.sha }}
        git_tag_prefix: "v"
        version: ${{ needs.build.outputs.assembly_version }}

    - name: Build Changelog
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v3.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: v${{ needs.build.outputs.assembly_version }}
        name: Release ${{ needs.build.outputs.assembly_version }}
        body: ${{ steps.build_changelog.outputs.changelog }}

  publish:
    name: Publish to NuGet
    if: github.ref == 'refs/heads/main' && success()

    needs: release

    runs-on: ubuntu-latest

    steps:
    - name: Install NuGet
      uses: NuGet/setup-nuget@v1.1.1
      with:
        nuget-api-key: ${{ secrets.NUGET_API_KEY }}
        nuget-version: ${{ env.NUGET_VERSION }}

    - name: Download NuGet Output
      id: download_nuget
      uses: actions/download-artifact@v3
      with:
        name: nuget_output
        path: ${{ env.NUGET_OUTPUT_FOLDER }}

    - name: Publish
      run: nuget push "**/*.nupkg" -Source 'https://api.nuget.org/v3/index.json'
