using System;
using DNX.Extensions.Exceptions;

//==============================================================================
// This source file was generated by a script - do not edit manually
//==============================================================================

namespace DNX.Extensions.Converters.BuiltInTypes;

/// <summary>
/// Class Convert#name#Extensions.
/// </summary>
public static class Convert#name#Extensions
{
    /// <summary>
    /// Converts the string to a #type#
    /// </summary>
    /// <param name="text">The text.</param>
    /// <returns>#type#</returns>
    /// <exception cref="DNX.Extensions.Exceptions.ConversionException">Unable to convert value to #name#</exception>
    public static #type# To#name#(this string text)
    {
        #type# result;

        if (!#type#.TryParse(text, out result))
        {
            throw new ConversionException(text, "Unable to convert value to #name#", typeof(#type#));
        }

        return result;
    }

    /// <summary>
    /// Converts the string to a #type#, or returns the default value if the conversion fails
    /// </summary>
    /// <param name="text">The text.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>#type#</returns>
    public static #type# To#name#(this string text, #type# defaultValue)
    {
        try
        {
            var result = text.To#name#();

            return result;
        }
        catch (ConversionException)
        {
            return defaultValue;
        }
    }

    /// <summary>
    /// Determines if the string can be converted to a #type# or not
    /// </summary>
    /// <param name="text">The text.</param>
    /// <returns><c>true</c> if the specified text is a #type#; otherwise, <c>false</c>.</returns>
    public static bool Is#name#(this string text)
    {
        try
        {
            text.To#name#();

            return true;
        }
        catch (ConversionException)
        {
            return false;
        }
    }
}
